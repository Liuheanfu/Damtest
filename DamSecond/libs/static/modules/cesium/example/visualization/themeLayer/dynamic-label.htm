<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>
  <title>动态注记</title>
  <!--引入第三方的jquery脚本库-->
  <script src="http://localhost:8080/static/libs/cdn/cesium/Cesium.js"></script>
  <!--cesium样式-->
  <link rel="stylesheet" href="http://localhost:8080/static/libs/cdn/cesium/Widgets/widgets.css"/>
  <link rel="stylesheet" href="http://localhost:8080/static/libs/cdn/cesium/MapGIS/css/mapgis.css"/>
  <!--示例中面板、按钮等，第三方layui的js库与css样式-->
  <script src="http://localhost:8080/static/libs/cdn/layui/layui.js"></script>
  <link rel="stylesheet" href="http://localhost:8080/static/libs/cdn/layui/css/layui.css"/>
  <!--示例公共样式-->
  <link rel="stylesheet" href="http://localhost:8080/static/libs/css/style.css"/>
  <link rel="stylesheet" href="http://localhost:8080/static/libs/css/visual.css"/>
  <script>
      var viewer;

      //加载三维视图
      function init() {
          //构造三维视图类（视图容器div的id，三维视图设置参数）
          viewer = new Cesium.Viewer("mapgis-3d-viewer", {
              infoBox: false,
              selectionIndicator: false,
              shouldAnimate: true,
          });

          if (Cesium.FeatureDetection.supportsImageRenderingPixelated()) {
              //判断是否支持图像渲染像素化处理
              viewer.resolutionScale = window.devicePixelRatio;
          }

          //开启抗锯齿
          viewer.scene.fxaa = true;
          viewer.scene.postProcessStages.fxaa.enabled = true;

          addTDT();
          initAll();
      }

      //加载天地图
      function addTDT() {
          let options = {
              //天地图URL，开发token （请到天地图官网申请自己的开发token，自带token仅做功能验证随时可能失效）
              url: "http://t0.tianditu.gov.cn/vec_w/wmts?tk=9c157e9585486c02edf817d2ecbc7752",
              //图层名称，vec：矢量底图、img：卫星影像底图、cva: 矢量注记图层（中文）、eva: 矢量注记图层（英文）、cia: 注记图层（中文）、eia: 注记图层（英文）、ter: 地形晕渲底图、cta: 注记（中文）、ibo: 全球国界
              layer: "vec",
              //瓦片样式
              style: "default",
              //比例尺
              tileMatrixSetID: "w",
              //请求格式
              format: "tiles"
          }
          viewer.imageryLayers.addImageryProvider(new Cesium.WebMapTileServiceImageryProvider(options));
      }

      var url;
      var gdbp;
      var field;
      var renderer, uniqueRenderer;
      var layerIndex;
      var layer;
      var vLayers;
      var pointLayerIndex = -2;
      var lineLayerIndex = -2;
      var areaLayerIndex = -2;
      var currentRenderType = ["point", "line", "area"];

      var pointLabelSymbol,
          lineLabelSymbol,
          areaLabelSymbol,
          pointLabelsOption,
          lineLabelsOption,
          areaLabelsOption;

      //加载三维地形地图文档（服务地址，配置参数）
      var dataGeojson = {
          point: "http://192.168.82.89:8200/Vector/json/metroStation.json",
          line: "http://192.168.82.89:8200/Vector/json/metro.json",
          area: "http://192.168.82.89:8200/Vector/json/populationSizeGeoJson_2017.json",
      };
      var tempData = dataGeojson;

      renderer = {
          type: "simple",
          symbol: {
              type: "polygon-3d",
              symbolLayers: {
                  type: "fill",
                  material: {color: new Cesium.Color(0.0, 0.0, 1.0, 1.0)},
                  outline: {
                      color: new Cesium.Color(1.0, 0.0, 0.0, 1.0),
                      width: 1.0,
                  },
                  size: 20.0,
              },
          },
          label: "标签",
      };

      uniqueRenderer = {
          type: "unique-value",
          field: "name",
          defaultSymbol: {
              type: "polygon-3d",
              symbolLayers: {
                  type: "fill",
                  material: {
                    color: new Cesium.Color.fromCssColorString('#E79392').withAlpha(0.6)
                  },
                  outline: {
                      color: new Cesium.Color.fromCssColorString('#E79392'),
                      width: 1.0,
                  },
              },
          },
          defaultLabel: "标签",
          uniqueValueInfos: [
              {
                  value: "新洲区",
                  symbol: {
                      type: "polygon-3d",
                      symbolLayers: {
                          type: "fill",
                          material: {
                            color: new Cesium.Color.fromCssColorString('#2578B4').withAlpha(0.6)
                          },
                          outline: {
                              color: new Cesium.Color.fromCssColorString('#2578B4'),
                              width: 1.0,
                          },
                      },
                  },
                  label: "新洲区",
              },
              {
                  value: "黄陂区",
                  symbol: {
                      type: "polygon-3d",
                      symbolLayers: {
                          type: "fill",
                          material: {
                              color: new new Cesium.Color.fromCssColorString('#78B3DE').withAlpha(0.6)
                          },
                          outline: {
                              color: new Cesium.Color.fromCssColorString('#78B3DE'),
                              width: 1.0,
                          },
                      },
                  },
                  label: "黄陂区",
              },
              {
                  value: "洪山区",
                  symbol: {
                      type: "polygon-3d",
                      symbolLayers: {
                          type: "fill",
                          material: {
                              color: new Cesium.Color.fromCssColorString('#9FC5DA').withAlpha(0.6),
                          },
                          outline: {
                              color: new Cesium.Color.fromCssColorString('#9FC5DA'),
                              width: 1.0,
                          },
                      },
                  },
                  label: "洪山区",
              },
              {
                  value: "东西湖区",
                  symbol: {
                      type: "polygon-3d",
                      symbolLayers: {
                          type: "fill",
                          material: {
                              color: new Cesium.Color.fromCssColorString('#6A3D9B').withAlpha(0.6)
                          },
                          outline: {
                              color: new Cesium.Color.fromCssColorString('#6A3D9B'),
                              width: 1.0,
                          },
                      },
                  },
                  label: "东西湖区",
              },
              {
                  value: "蔡甸区",
                  symbol: {
                      type: "polygon-3d",
                      symbolLayers: {
                          type: "fill",
                          material: {
                              color: new Cesium.Color.fromCssColorString('#8287F7').withAlpha(0.6)
                          },
                          outline: {
                              color: new Cesium.Color.fromCssColorString('#8287F7'),
                              width: 1.0,
                          },
                      },
                  },
                  label: "蔡甸区",
              },
              {
                  value: "江夏区",
                  symbol: {
                      type: "polygon-3d",
                      symbolLayers: {
                          type: "fill",
                          material: {
                              color: new Cesium.Color.fromCssColorString('#82F7FE').withAlpha(0.6)
                          },
                          outline: {
                              color: new Cesium.Color.fromCssColorString('#82F7FE'),
                              width: 1.0,
                          },
                      },
                  },
                  label: "江夏区",
              },
              {
                  value: "青山区",
                  symbol: {
                      type: "polygon-3d",
                      symbolLayers: {
                          type: "fill",
                          material: {
                              color: new Cesium.Color.fromCssColorString('#B2DF8A').withAlpha(0.6)
                          },
                          outline: {
                              color: new Cesium.Color.fromCssColorString('#B2DF8A'),
                              width: 1.0,
                          },
                      },
                  },
                  label: "青山区",
              },
              {
                  value: "汉阳区",
                  symbol: {
                      type: "polygon-3d",
                      symbolLayers: {
                          type: "fill",
                          material: {
                              color: new Cesium.Color.fromCssColorString('#4CA12E').withAlpha(0.6)
                          },
                          outline: {
                              color: new Cesium.Color.fromCssColorString('#4CA12E'),
                              width: 1.0,
                          },
                      },
                  },
                  label: "汉阳区",
              },
              {
                  value: "武昌区",
                  symbol: {
                      type: "polygon-3d",
                      symbolLayers: {
                          type: "fill",
                          material: {
                              color: new Cesium.Color.fromCssColorString('#E4432D').withAlpha(0.6)
                          },
                          outline: {
                              color: new Cesium.Color.fromCssColorString('#E4432D'),
                              width: 1.0,
                          },
                      },
                  },
                  label: "武昌区",
              },
              {
                  value: "硚口区",
                  symbol: {
                      type: "polygon-3d",
                      symbolLayers: {
                          type: "fill",
                          material: {
                              color: new Cesium.Color.fromCssColorString('#F17D30').withAlpha(0.6)
                          },
                          outline: {
                              color: new Cesium.Color.fromCssColorString('#F17D30'),
                              width: 1.0,
                          },
                      },
                  },
                  label: "硚口区",
              },
              {
                  value: "江岸区",
                  symbol: {
                      type: "polygon-3d",
                      symbolLayers: {
                          type: "fill",
                          material: {
                              color: new Cesium.Color.fromCssColorString('#F8BF6F').withAlpha(0.6)
                          },
                          outline: {
                              color: new Cesium.Color.fromCssColorString('#F8BF6F'),
                              width: 1.0,
                          },
                      },
                  },
                  label: "江岸区",
              },
              {
                  value: "汉南区",
                  symbol: {
                      type: "polygon-3d",
                      symbolLayers: {
                          type: "fill",
                          material: {
                              color: new Cesium.Color.fromCssColorString('#B2DF8A').withAlpha(0.6)
                          },
                          outline: {
                              color: new Cesium.Color.fromCssColorString('#B2DF8A'),
                              width: 1.0,
                          },
                      },
                  },
                  label: "汉南区",
              },
          ],
      };

      function removeLayers() {
          viewer.scene.layers.removeAllFeatureLayers();
          viewer.scene.layers.removeAllGeojsonLayers();
      }

      function removeLayerByType(type) {
          var i;
          if (type === "point") {
              i = pointLayerIndex;
          } else if (type === "line") {
              i = lineLayerIndex;
          } else {
              i = areaLayerIndex;
          }
          viewer.scene.layers.removeFeatureLayerByID(i, true);
          viewer.scene.layers.removeGeojsonLayerByID(i, true);
      }

      function addLayer(type, url, _renderer, labelsOption) {
          var options = {
              autoReset: true,
              loadAll: true,
              tileFeaturesCount: 400,
              // clampToGround: true,
              getDocLayerIndexes: function (indexs) {
                  layerIndex = indexs[0];
                  if (type === "point") {
                      pointLayerIndex = indexs[0];
                  } else if (type === "line") {
                      lineLayerIndex = indexs[0];
                  } else {
                      areaLayerIndex = indexs[0];
                  }
                  layer = viewer.scene.layers.getLayer(layerIndex);
              },
              loaded: function (layerInfo) {
                  console.log("沙盒回调loaded获取到的layerInfo", layerInfo);
              },
              renderer: _renderer || renderer,
              // 开启动态注记
              isDrawLabels: true,
              labelsOption: labelsOption,
          };
          options.url = url;
          viewer.scene.layers.appendGeojsonLayer(url, options);
      }

      // 注记符号提供基础的样式参数
      // 点注记符号样式（和线、区符号样式一致）
      pointLabelSymbol = {
          // 填充颜色 rgba or 16进制颜色
          color: 'rgba(255,255,255,1)',
          // 描边颜色
          haloColor: 'rgba(0,0,0,1)',
          // 描边宽度
          haloSize: 1,
          // 行高
          lineHeight: 1.1,
          // 行宽
          lineWidth: 80,
          // 最大行数
          lineMaxNum: 3,
          // 换行
          textWraps: true,
          // 文本间距
          letterSpacing: '1px',
          // x方向偏移
          xoffset: 0,
          // y方向偏移
          yoffset: 0,
          // 字体样式 参考css
          font: {
              size: 15,
              family: 'simHei',
              weight: 'normal',
              style: 'normal'
          },
          // 是否开启填充背景
          showBackground: true,
          // 背景填充色
          backgroundColor: 'rgba(42,42,42,0.8)',
          // 背景边距
          backgroundPadding: 5,
          // 是否开启阴影
          showTextShadow: false,
          textShadowOffsetX: 1,
          textShadowOffsetY: 1,
          textShadowColor: '#ffffff',
          textShadowBlur: 2,
          // 文字删除线
          showTextDecorationThroughline: false,
          textDecorationThroughlineColor: 'rgba(255,255,255,1)',
          textDecorationThroughlineWidth: 1,
          // 文字下划线
          showTextDecorationUnderline: false,
          textDecorationUnderlineColor: 'rgba(255,255,255,1)',
          textDecorationUnderlineWidth: 1
      };

      // 线注记符号
      lineLabelSymbol = {
          color: 'rgba(255,255,255,1)',
          haloColor: 'rgba(0,0,0,1)',
          haloSize: 1,
          lineHeight: 1.1,
          lineWidth: 80,
          lineMaxNum: 3,
          textWraps: true,
          xoffset: 0,
          yoffset: 0,
          font: {
              size: 22,
              family: 'simHei',
              weight: 'normal',
              style: 'normal'
          },
          showBackground: true,
          backgroundColor: '#183f7d',
          backgroundPadding: 5,
          // 是否开启阴影
          showTextShadow: false,
          textShadowOffsetX: 1,
          textShadowOffsetY: 1,
          textShadowColor: '#ffffff',
          textShadowBlur: 2,
          // 文字删除线
          showTextDecorationThroughline: false,
          textDecorationThroughlineColor: 'rgba(255,255,255,1)',
          textDecorationThroughlineWidth: 1,
          // 文字下划线
          showTextDecorationUnderline: false,
          textDecorationUnderlineColor: 'rgba(255,255,255,1)',
          textDecorationUnderlineWidth: 1
      };

      //区注记符号
      areaLabelSymbol = {
          color: 'rgba(255,255,255,1)',
          haloColor: 'rgba(0,0,0,1)',
          haloSize: 1,
          lineHeight: 1.1,
          lineWidth: 150,
          lineMaxNum: 3,
          textWraps: true,
          xoffset: 0,
          yoffset: 0,
          font: {
              size: 30,
              family: 'simHei',
              weight: 'normal',
              style: 'normal'
          },
          showBackground: false,
          backgroundColor: 'rgba(42,42,42,0.8)',
          backgroundPadding: 5,
          // 是否开启阴影
          showTextShadow: false,
          textShadowOffsetX: 1,
          textShadowOffsetY: 1,
          textShadowColor: '#ffffff',
          textShadowBlur: 2,
          // 文字删除线
          showTextDecorationThroughline: false,
          textDecorationThroughlineColor: 'rgba(255,255,255,1)',
          textDecorationThroughlineWidth: 1,
          // 文字下划线
          showTextDecorationUnderline: false,
          textDecorationUnderlineColor: 'rgba(255,255,255,1)',
          textDecorationUnderlineWidth: 1
      };

      pointLabelsOption = {
          // 点注记符号
          symbol: pointLabelSymbol,
          // 渲染方式 1.canvas 2.label
          renderMode: 'canvas',
          // 可见范围，此处为高度。单位为米
          // 最大可见范围
          maxScale: 600000,
          // 最小可见范围
          minScale: 500,
          // 注记高度
          labelHeight: 0,
          // 布局位置 可选 1.above-left 2.above-center 3.above-right 4.center-left 5.center-center 6.center-right 7.below-left 8.below-center 9.below-right
          labelPlacement: 'above-center',
          // 要素字段
          currentAttributeName: 'n',
          // cesium 相关参数设置
          scaleByDistance: new Cesium.NearFarScalar(500, 1, 600000, 0)
      };
      lineLabelsOption = {
          // 线注记符号
          symbol: lineLabelSymbol,
          // 渲染方式 1.canvas 2.label
          renderMode: 'canvas',
          // 可见范围，此处为高度。单位为米
          // 最大可见范围
          maxScale: 600000,
          // 最小可见范围
          minScale: 500,
          // 注记高度
          labelHeight: 0,
          // 布局位置 可选 1.'on-line' 压线 2.'above-line' 线上 3.'under-line' 线下
          labelPlacement: 'above-line',
          // 要素字段
          currentAttributeName: 'ln',
          //- 线注记重复参数
          // 开启注记重复
          repeatLabel: true,
          // 重复步长,单位米
          repeatLabelDistance: 8000,
          // 步长分段开始比例
          repeatStartRate: 0.4,
          // 步长分段结束比例
          repeatEndRate: 0.7,
          // 文字分布 1.'auto-spread' 字母集中，汉字分散 2.'centralization-spread'集中 3.'decentralize-spread' 分散
          lineLabelSpread: 'auto-spread',
          // 文字与线关系 仅集中注记时生效  1.'start' 线头 2.'middle' 线中点 3.'end' 线尾
          labelPositionAlong: 'middle',
          // cesium 相关参数设置
          scaleByDistance: new Cesium.NearFarScalar(500, 1, 600000, 0)
      };
      areaLabelsOption = {
          // 区注记符号
          symbol: areaLabelSymbol,
          // 渲染方式 1.canvas 2.label
          renderMode: 'canvas',
          // 可见范围，此处为高度。单位为米
          // 最大可见范围
          maxScale: 600000,
          // 最小可见范围
          minScale: 500,
          // 注记高度
          labelHeight: 300,
          // 布局位置 可选 1.'parallel' 平行 2.'outside' 区外 3.'bottom' 底部 4.'skeleton' 骨架线
          labelPlacement: 'skeleton',
          // 注记要素字段
          currentAttributeName: 'name',
          // 骨架线注记开始比例
          skeletonLineStartRate: 0.3,
          // 骨架线注记结束比例
          skeletonLineEndRate: 0.7,
          // cesium 相关参数设置
          scaleByDistance: new Cesium.NearFarScalar(500, 1, 600000, 0)
      };

      function addTypeFeatureLayer(type) {
          if (type === "point") {
              addLayer("point", tempData.point, null, pointLabelsOption);
              console.log("pointLabelsOption: ", pointLabelsOption);
          } else if (type === "line") {
              addLayer("line", tempData.line, null, lineLabelsOption);
          } else {
              addLayer("area", tempData.area, uniqueRenderer, areaLabelsOption);
          }
      }

      function initLayer(type) {
          removeLayerByType(type);
          addTypeFeatureLayer(type);
      }

      function initAll() {
          removeLayers();
          currentRenderType.forEach(function (t) {
              addTypeFeatureLayer(t);
          });
      }

      function selectLayer(target) {
          switch (target) {
              case "全图层": {
                  currentRenderType = ["point", "line", "area"];
                  break;
              }
              case "点要素图层": {
                  currentRenderType = ["point"];
                  break;
              }
              case "线要素图层": {
                  currentRenderType = ["line"];
                  break;
              }
              case "面要素图层": {
                  currentRenderType = ["area"];
                  break;
              }
              default: {
                  currentRenderType = ["point", "line", "area"];
              }
          }
          initAll();
      }

      function renderMode(target) {
          pointLabelsOption.renderMode = target;
          lineLabelsOption.renderMode = target;
          areaLabelsOption.renderMode = target;
          initAll();
      }

      function pointLabelPlacement(text) {
          pointLabelsOption.labelPlacement = text;
          initLayer("point");
      }

      function lineLabelPlacement(text) {
          lineLabelsOption.labelPlacement = text;
          initLayer("line");
      }

      function areaLabelPlacement(text) {
          areaLabelsOption.labelPlacement = text;
          initLayer("area");
      }

      function pointCurrentAttributeName(n) {
          pointLabelsOption.currentAttributeName = n;
          initAll();
      }

      function lineCurrentAttributeName(n) {
          lineLabelsOption.currentAttributeName = n;
          initAll();
      }

      function areaCurrentAttributeName(n) {
          areaLabelsOption.currentAttributeName = n;
          initAll();
      }

      function lineLabelSpread(n) {
          lineLabelsOption.lineLabelSpread = n;
          initLayer("line");
      }

      function labelPositionAlong(n) {
          lineLabelsOption.labelPositionAlong = n;
          initLayer("line");
      }

      function repeatLabel(n) {
          lineLabelsOption.repeatLabel = !!n;
          initLayer("line");
      }

      function repeatLabelDistance(n) {
          lineLabelsOption.repeatLabelDistance = parseInt(n);
          initLayer("line");
      }

      layui.use(function () {
          var layer = layui.layer,
              $ = layui.jquery,
              form = layui.form;

          //监听选择框
          form.on("select(selectLayer)", function (data) {
              selectLayer(data.value)
          });

          form.on("select(renderMode)", function (data) {
              renderMode(data.value)
          });

          form.on("select(pointLabelPlacement)", function (data) {
              pointLabelPlacement(data.value)
          });

          form.on("select(pointCurrentAttributeName)", function (data) {
              pointCurrentAttributeName(data.value)
          });

          form.on("select(lineLabelPlacement)", function (data) {
              lineLabelPlacement(data.value)
          });

          form.on("select(lineCurrentAttributeName)", function (data) {
              lineCurrentAttributeName(data.value)
          });

          form.on("select(lineLabelSpread)", function (data) {
              if(data.value==='centralization-spread'){
                  //只有'集中'状态下，才能调整线注记的位置
                  $('#labelPositionAlongSelect').removeAttr('disabled');
                  form.render('select');
              } else {
                  $('#labelPositionAlongSelect').attr("disabled","disabled");
                  form.render('select');
              }
              lineLabelSpread(data.value)
          });

          form.on("select(labelPositionAlong)", function (data) {
              labelPositionAlong(data.value)
          });
          form.on("select(repeatLabel)", function (data) {
              repeatLabel(data.value)
          });
          form.on("select(repeatLabelDistance)", function (data) {
              repeatLabelDistance(data.value)
          });

          form.on("select(areaLabelPlacement)", function (data) {
              areaLabelPlacement(data.value)
          });

          form.on("select(areaCurrentAttributeName)", function (data) {
              areaCurrentAttributeName(data.value)
          });

      });
  </script>
</head>

<body onload="init()">
<div id="mapgis-3d-viewer"></div>
<div class="layui-panel layui-panel-right">
  <form class="layui-form layui-form-pane" action="">
    <div class="sample-main-panel" style="height: 534px;border: none;">
      <div class="layui-form-item">
        <label>选取图层</label>
        <div class="layui-input-block">
          <select lay-filter="selectLayer">
            <option value="全图层">全图层</option>
            <option value="点要素图层">点要素图层</option>
            <option value="线要素图层">线要素图层</option>
            <option value="面要素图层">面要素图层</option>
          </select>
        </div>
      </div>
      <div class="layui-form-item">
        <label>注记渲染方式</label>
        <div class="layui-input-block">
          <select lay-filter="renderMode">
            <option value="canvas">canvas</option>
            <option value="label">label</option>
          </select>
        </div>
      </div>
      <div class="layui-form-item">
        <label>点注记位置</label>
        <div class="layui-input-block">
          <select lay-filter="pointLabelPlacement">
            <option value="above-center">上</option>
            <option value="below-center">下</option>
            <option value="center-left">左</option>
            <option value="center-right">右</option>
            <option value="center-center">中心</option>
            <option value="above-left">左上</option>
            <option value="below-left">左下</option>
            <option value="above-right">右上</option>
            <option value="below-right">右下</option>
          </select>
        </div>
      </div>
      <div class="layui-form-item">
        <label>点注记字段</label>
        <div class="layui-input-block">
          <select lay-filter="pointCurrentAttributeName">
            <option value="n">n</option>
            <option value="kn">kn</option>
            <option value="sp">sp</option>
          </select>
        </div>
      </div>
      <div class="layui-form-item">
        <label>线注记位置</label>
        <div class="layui-input-block">
          <select lay-filter="lineLabelPlacement">
            <option value="above-line">线上</option>
            <option value="on-line">压盖</option>
            <option value="below-line">线下</option>
          </select>
        </div>
      </div>
      <div class="layui-form-item">
        <label>线注记字段</label>
        <div class="layui-input-block">
          <select lay-filter="lineCurrentAttributeName">
            <option value="ln">ln</option>
            <option value="kn">kn</option>
          </select>
        </div>
      </div>
      <div class="layui-form-item">
        <label>线注记分布</label>
        <div class="layui-input-block">
          <select lay-filter="lineLabelSpread">
            <option value="auto-spread">自动</option>
            <option value="centralization-spread">集中</option>
            <option value="decentralize-spread">分散</option>
          </select>
        </div>
      </div>
      <div class="layui-form-item">
        <label>注记与线关系</label>
        <div class="layui-input-block">
          <select id="labelPositionAlongSelect" disabled lay-filter="labelPositionAlong">
            <option value="middle">线中部</option>
            <option value="start">线头</option>
            <option value="end">线尾</option>
          </select>
        </div>
      </div>
      <div class="layui-form-item">
        <label>线是否重复</label>
        <div class="layui-input-block">
          <select lay-filter="repeatLabel">
            <option value="yes">是</option>
            <option value="">否</option>
          </select>
        </div>
      </div>
      <div class="layui-form-item">
        <label>重复步长</label>
        <div class="layui-input-block">
          <select lay-filter="repeatLabelDistance">
            <option value="8000">8000米分段</option>
            <option value="6000">6000米分段</option>
            <option value="4000">4000米分段</option>
            <option value="2000">2000米分段</option>
          </select>
        </div>
      </div>
      <div class="layui-form-item">
        <label>面注记位置</label>
        <div class="layui-input-block">
          <select lay-filter="areaLabelPlacement">
            <option value="skeleton">骨架线</option>
            <option value="parallel">平行</option>
            <option value="outside">区外</option>
            <option value="bottom">底部</option>
          </select>
        </div>
      </div>
      <div class="layui-form-item">
        <label>面注记字段</label>
        <div class="layui-input-block">
          <select lay-filter="areaCurrentAttributeName">
            <option value="name">name</option>
            <option value="adcode">adcode</option>
          </select>
        </div>
      </div>
    </div>
  </form>
</div>
</body>
<style>
  .layui-select-disabled .layui-disabled{
    border-color: #333 !important;
    color: #666 !important;
  }
  .layui-select-disabled .layui-edge{
    border-top-color: #666 !important;
  }
</style>
</html>
