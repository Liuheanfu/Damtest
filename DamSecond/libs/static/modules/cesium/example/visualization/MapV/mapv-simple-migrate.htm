<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
  <title>单一迁移轨迹</title>
  <!--引入Cesium.js库-->
  <script src="http://localhost:8080/static/libs/cdn/cesium/Cesium.js"></script>
  <!--引入Cesium.js库相关css样式-->
  <link rel="stylesheet" href="http://localhost:8080/static/libs/cdn/cesium/Widgets/widgets.css"/>
  <link rel="stylesheet" href="http://localhost:8080/static/libs/cdn/cesium/MapGIS/css/mapgis.css"/>
  <!--引入mapv-->
  <script type="text/javascript" src="http://localhost:8080/static/libs/cdn/overlay/mapv/mapv.min.js"></script>
  <!--配合echarts引入文件-->
  <script src="http://localhost:8080/static/libs/cdn/overlay/MapvLayer.js" type="module"></script>
  <!--示例中面板、按钮等，第三方layui的js库与css样式-->
  <script src="http://localhost:8080/static/libs/cdn/layui/layui.js"></script>
  <link rel="stylesheet" href="http://localhost:8080/static/libs/cdn/layui/css/layui.css"/>
  <!--示例公共样式-->
  <link rel="stylesheet" href="http://localhost:8080/static/libs/css/style.css"/>
  <script>
      'use strict';
      // 定义三维视图的主要类
      let viewer = null;

      function initMapVData(){
          httpGetPromise('http://192.168.82.89:8200/Vector/json/simpleMigrate/china.json').then((geojson)=>{
              let geojsonOptions = {
                  context: "2d",
                  gradient: {
                      0: "rgba(55, 50, 250, 0.4)",
                      1: "rgba(55, 50, 250, 1)",
                  },
                  max: 354551,
                  draw: "intensity",
              };

              let geojsonDataSet = mapv.geojson.getDataSet(geojson);

              let to = "北京";

              let qianxi = new mapv.DataSet([
                  {
                      from: "河北",
                      count: 354551,
                      to: to,
                  },
                  {
                      from: "天津",
                      count: 97323,
                      to: to,
                  },
                  {
                      from: "山东",
                      count: 28664,
                      to: to,
                  },
                  {
                      from: "山西",
                      count: 16650,
                      to: to,
                  },
                  {
                      from: "辽宁",
                      count: 14379,
                      to: to,
                  },
                  {
                      from: "河南",
                      count: 10980,
                      to: to,
                  },
                  {
                      from: "内蒙古",
                      count: 9603,
                      to: to,
                  },
                  {
                      from: "江苏",
                      count: 4536,
                      to: to,
                  },
                  {
                      from: "上海",
                      count: 3556,
                      to: to,
                  },
                  {
                      from: "广东",
                      count: 2600,
                      to: to,
                  },
              ]);

              let qianxiData = qianxi.get();

              let lineData = [];
              let pointData = [];
              let textData = [];
              let timeData = [];

              let citys = {};

              for (let i = 0; i < qianxiData.length; i++) {
                  let fromCenter = mapv.utilCityCenter.getCenterByCityName(
                      qianxiData[i].from
                  );
                  let toCenter = mapv.utilCityCenter.getCenterByCityName(
                      qianxiData[i].to
                  );
                  if (!fromCenter || !toCenter) {
                      continue;
                  }
                  citys[qianxiData[i].from] = qianxiData[i].count;
                  citys[qianxiData[i].to] = 100;
                  pointData.push({
                      geometry: {
                          type: "Point",
                          coordinates: [fromCenter.lng, fromCenter.lat],
                      },
                  });
                  pointData.push({
                      geometry: {
                          type: "Point",
                          coordinates: [toCenter.lng, toCenter.lat],
                      },
                  });
                  textData.push({
                      geometry: {
                          type: "Point",
                          coordinates: [fromCenter.lng, fromCenter.lat],
                      },
                      text: qianxiData[i].from,
                  });
                  textData.push({
                      geometry: {
                          type: "Point",
                          coordinates: [toCenter.lng, toCenter.lat],
                      },
                      text: qianxiData[i].to,
                  });

                  let curve = mapv.utilCurve.getPoints([fromCenter, toCenter]);

                  for (let j = 0; j < curve.length; j++) {
                      timeData.push({
                          geometry: {
                              type: "Point",
                              coordinates: curve[j],
                          },
                          count: 1,
                          time: j,
                      });
                  }

                  lineData.push({
                      geometry: {
                          type: "LineString",
                          coordinates: curve,
                          //coordinates: [[fromCenter.lng, fromCenter.lat], [toCenter.lng, toCenter.lat]]
                      },
                      count: 30 * Math.random(),
                  });
              }

              let data = geojsonDataSet.get({
                  filter: function (item) {
                      if (!citys[item.name]) {
                          return false;
                      }

                      item.count = citys[item.name];
                      return true;
                  },
              });
              geojsonDataSet = new mapv.DataSet(data);
              // 声明cesium的mapv图层并将其显示到三维球上
              new window.MapvLayer(viewer, geojsonDataSet, geojsonOptions);
              // 构建对应的dataset
              let textDataSet = new mapv.DataSet(textData);
              // 设置对应的参数
              // https://github.com/huiyan-fe/mapv/blob/master/API.md
              let textOptions = {
                  context: "2d", //cesium必须设置画布为2d
                  draw: "text",
                  font: "14px Arial",
                  fillStyle: "white",
                  shadowColor: "yellow",
                  shadowBlue: 10,
                  zIndex: 11,
                  shadowBlur: 10,
              };
              // 声明cesium的mapv图层并将其显示到三维球上
              new window.MapvLayer(viewer, textDataSet, textOptions);

              let lineDataSet = new mapv.DataSet(lineData);
              // https://github.com/huiyan-fe/mapv/blob/master/API.md
              let lineOptions = {
                  context: "2d", //cesium必须设置画布为2d
                  strokeStyle: "rgba(255, 250, 50, 0.8)",
                  shadowColor: "rgba(255, 250, 50, 1)",
                  shadowBlur: 20,
                  lineWidth: 2,
                  zIndex: 100,
                  draw: "simple",
              };
              // 声明cesium的mapv图层并将其显示到三维球上
              new window.MapvLayer(viewer, lineDataSet, lineOptions);
              // https://github.com/huiyan-fe/mapv/blob/master/API.md
              let pointOptions = {
                  context: "2d", //cesium必须设置画布为2d
                  fillStyle: "rgba(254,175,3,0.7)",
                  shadowColor: "rgba(55, 50, 250, 0.5)",
                  shadowBlur: 10,
                  size: 5,
                  zIndex: 10,
                  draw: "simple",
              };

              let pointDataSet = new mapv.DataSet(pointData);
              // 声明cesium的mapv图层并将其显示到三维球上
              new window.MapvLayer(viewer, pointDataSet, pointOptions);

              let timeDataSet = new mapv.DataSet(timeData);

              // https://github.com/huiyan-fe/mapv/blob/master/API.md
              let timeOptions = {
                  context: "2d", //cesium必须设置画布为2d
                  fillStyle: "rgba(255, 250, 250, 0.5)",
                  zIndex: 200,
                  size: 2.5,
                  animation: {
                      type: "time",
                      stepsRange: {
                          start: 0,
                          end: 50,
                      },
                      trails: 10,
                      duration: 2,
                  },
                  draw: "simple",
              };
              // 声明cesium的mapv图层并将其显示到三维球上
              new window.MapvLayer(viewer, timeDataSet, timeOptions);
          });
      }

      function init(){
          //构造三维视图类（视图容器div的id，三维视图设置参数）
          viewer = new Cesium.Viewer('mapgis-3d-viewer', {});
          // 蓝色背景
          let blueImage = new Cesium.UrlTemplateImageryProvider({
              url: "https://map.geoq.cn/arcgis/rest/services/ChinaOnlineStreetPurplishBlue/MapServer/tile/{z}/{y}/{x}",
              tilingScheme: new Cesium.WebMercatorTilingScheme(),
              maximumLevel: 18,
          });
          viewer.imageryLayers.addImageryProvider(blueImage);
          initMapVData();
      }

      // 发送请求获取数据
      function httpGetPromise(url) {
          return new Promise(function (resolve, reject) {
              const handler = function () {
                  if (this.readyState !== 4) {
                      return;
                  }
                  if (this.status === 200) {
                      resolve(this.response);
                  } else {
                      reject(new Error(this.statusText));
                  }
              };
              const client = new XMLHttpRequest();
              client.open('GET', url);
              client.onreadystatechange = handler;
              client.responseType = 'json';
              client.setRequestHeader('Accept', 'application/json');
              client.send();
          });
      }

  </script>
</head>
<body onload="init()">
<div id="mapgis-3d-viewer"></div>
</body>
</html>
