<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
  <title>轨迹汇聚</title>
  <!--引入Cesium.js库-->
  <script src="http://localhost:8080/static/libs/cdn/cesium/Cesium.js"></script>
  <!--引入Cesium.js库相关css样式-->
  <link rel="stylesheet" href="http://localhost:8080/static/libs/cdn/cesium/Widgets/widgets.css"/>
  <link rel="stylesheet" href="http://localhost:8080/static/libs/cdn/cesium/MapGIS/css/mapgis.css"/>
  <!--引入mapv-->
  <script type="text/javascript" src="http://localhost:8080/static/libs/cdn/overlay/mapv/mapv.min.js"></script>
  <!--配合echarts引入文件-->
  <script src="http://localhost:8080/static/libs/cdn/overlay/MapvLayer.js" type="module"></script>
  <!--示例中面板、按钮等，第三方layui的js库与css样式-->
  <script src="http://localhost:8080/static/libs/cdn/layui/layui.js"></script>
  <link rel="stylesheet" href="http://localhost:8080/static/libs/cdn/layui/css/layui.css"/>
  <!--示例公共样式-->
  <link rel="stylesheet" href="http://localhost:8080/static/libs/css/style.css"/>
  <script>
      'use strict';
      // 定义三维视图的主要类
      let viewer = null;

      function initMapVData(){
          let randomCount = 500;

          let node_data = {
              "0": {
                  x: 108.154518,
                  y: 36.643346,
              },
              "1": {
                  x: 121.485124,
                  y: 31.235317,
              },
          };

          let edge_data = [
              {
                  source: "1",
                  target: "0",
              },
          ];

          let citys = ["北京", "天津", "上海", "重庆", "石家庄", "太原", "呼和浩特", "哈尔滨", "长春", "沈阳", "济南",
              "南京", "合肥", "杭州", "南昌", "福州", "郑州", "武汉", "长沙", "广州", "南宁", "西安", "银川", "兰州", "西宁",
              "乌鲁木齐", "成都", "贵阳", "昆明", "拉萨", "海口"];

          // 构造数据
          for (let i = 1; i < randomCount; i++) {
              let cityCenter = mapv.utilCityCenter.getCenterByCityName(
                  citys[parseInt(Math.random() * citys.length)]
              );
              node_data[i] = {
                  x: cityCenter.lng - 5 + Math.random() * 10,
                  y: cityCenter.lat - 5 + Math.random() * 10,
              };
              edge_data.push({
                  source: ~~(i * Math.random()),
                  target: "0",
              });
          }

          let fbundling = mapv.utilForceEdgeBundling().nodes(node_data).edges(edge_data);

          let results = fbundling();

          let data = [];
          let timeData = [];

          for (let i = 0; i < results.length; i++) {
              let line = results[i];
              let coordinates = [];
              for (let j = 0; j < line.length; j++) {
                  coordinates.push([line[j].x, line[j].y]);
                  timeData.push({
                      geometry: {
                          type: "Point",
                          coordinates: [line[j].x, line[j].y],
                      },
                      count: 1,
                      time: j,
                  });
              }

              data.push({
                  geometry: {
                      type: "LineString",
                      coordinates: transformCoords(coordinates),
                  },
              });

              function transformCoords(coordinates) {
                  let coords = [];
                  coordinates.map(function (coordinate) {
                      coords.push(coordinate);
                  });
                  return coords;
              }
          }

          // 构建对应的dataset
          let dataSet1 = new mapv.DataSet(data);

          // 设置对应的参数
          // https://github.com/huiyan-fe/mapv/blob/master/API.md
          let options1 = {
              context: "2d", //cesium必须设置画布为2d
              cesium: {
                  postRender: true,
                  postRenderFrame: 0,
              },
              strokeStyle: "rgba(55, 50, 250, 0.3)",
              globalCompositeOperation: "lighter",
              shadowColor: "rgba(55, 50, 250, 0.5)",
              shadowBlur: 10,
              lineWidth: 1.0,
              draw: "simple", // 基础绘制
          };

          // 声明cesium的mapv图层并将其显示到三维球上
          let mapv1 = new window.MapvLayer(viewer, dataSet1, options1);
          // 构建对应的dataset
          let dataSet2 = new mapv.DataSet(timeData);

          let options2 = {
              context: "2d", //cesium必须设置画布为2d
              fillStyle: "rgba(255, 250, 250, 0.9)",
              globalCompositeOperation: "lighter",
              size: 1.5,
              animation: {
                  type: "time",
                  stepsRange: {
                      start: 0,
                      end: 100,
                  },
                  trails: 1,
                  duration: 5,
              },
              draw: "simple", // 基础绘制
          };
          // 声明cesium的mapv图层并将其显示到三维球上
          let mapv2 = new window.MapvLayer(viewer, dataSet2, options2);
      }

      function init(){
          //构造三维视图类（视图容器div的id，三维视图设置参数）
          viewer = new Cesium.Viewer('mapgis-3d-viewer', {});
          // 蓝色背景
          let blueImage = new Cesium.UrlTemplateImageryProvider({
              url:
                  "https://map.geoq.cn/arcgis/rest/services/ChinaOnlineStreetPurplishBlue/MapServer/tile/{z}/{y}/{x}",
              tilingScheme: new Cesium.WebMercatorTilingScheme(),
              maximumLevel: 18,
          });
          viewer.imageryLayers.addImageryProvider(blueImage);
          initMapVData();
      }
  
  </script>
</head>
<body onload="init()">
<div id="mapgis-3d-viewer"></div>
</body>
</html>
