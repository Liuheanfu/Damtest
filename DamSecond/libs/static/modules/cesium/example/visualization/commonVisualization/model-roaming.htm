<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no"/>
  <title>行人漫游工具</title>
  <!--引入Cesium.js库-->
  <script src="http://localhost:8080/static/libs/cdn/cesium/Cesium.js"></script>
  <!--引入Cesium.js库相关css样式-->
  <link rel="stylesheet" href="http://localhost:8080/static/libs/cdn/cesium/Widgets/widgets.css"/>
  <link rel="stylesheet" href="http://localhost:8080/static/libs/cdn/cesium/MapGIS/css/mapgis.css"/>
  <!--示例中面板、按钮等，第三方layui的js库与css样式-->
  <script src="http://localhost:8080/static/libs/cdn/layui/layui.js"></script>
  <link rel="stylesheet" href="http://localhost:8080/static/libs/cdn/layui/css/layui.css"/>
  <!--示例公共样式-->
  <link rel="stylesheet" href="http://localhost:8080/static/libs/css/style.css"/>
  <link rel="stylesheet" href="http://localhost:8080/static/libs/css/tool.css"/>
  <!--turf.js库-->
  <script src="http://localhost:8080/static/libs/cdn/turf/turf.min.js"></script>
  <script>
      "use strict";
      //定义三维视图的主要类
      let viewer, options, animation, graphicsLayer;
      //取得jquery对象
      let $ = layui.$;

      //地图初始化函数
      function init() {
          //构造三维视图类（视图容器div的id，三维视图设置参数）
          viewer = new Cesium.Viewer("mapgis-3d-viewer", {
              infoBox: false,
              selectionIndicator: false,
              shouldAnimate: true,
          });

          //加载天地图
          options = {
              //天地图URL，开发token （请到天地图官网申请自己的开发token，自带token仅做功能验证随时可能失效）
              url: "http://t0.tianditu.gov.cn/vec_w/wmts?tk=9c157e9585486c02edf817d2ecbc7752",
              //图层名称，vec：矢量底图、img：卫星影像底图、cva: 矢量注记图层（中文）、eva: 矢量注记图层（英文）、cia: 注记图层（中文）、eia: 注记图层（英文）、ter: 地形晕渲底图、cta: 注记（中文）、ibo: 全球国界
              layer: "vec",
              //瓦片样式
              style: "default",
              //比例尺
              tileMatrixSetID: "w",
              //请求格式
              format: "tiles"
          };
          //添加卫星影像
          viewer.imageryLayers.addImageryProvider(new Cesium.WebMapTileServiceImageryProvider(options));

          // 添加中地大楼模型
          viewer.scene.layers.appendM3DLayer(
              "http://192.168.82.89:8200/3DData/ModelCache/M3D//1.0/ZondyFaceModels/ZondyFaceModels.mcj"
          );
          let pathPositions = [
              {
                  x: -2273175.578013623,
                  y: 5010638.458497225,
                  z: 3215157.5186911672,
              },
              {
                  x: -2273186.15173117,
                  y: 5010663.3702553185,
                  z: 3215111.5241055344,
              },
              {
                  x: -2273186.059557918,
                  y: 5010665.8169212,
                  z: 3215107.815526737,
              },
              {
                  x: -2273143.314663209,
                  y: 5010712.162479221,
                  z: 3215066.039824561,
              },
              {
                  x: -2273141.8576728688,
                  y: 5010714.347794549,
                  z: 3215063.717603765,
              },
              {
                  x: -2273140.8739640433,
                  y: 5010753.004724801,
                  z: 3215004.560829764,
              },
              {
                  x: -2273138.540278631,
                  y: 5010754.703344927,
                  z: 3215003.5664240783,
              },
              {
                  x: -2273111.358422647,
                  y: 5010766.642102002,
                  z: 3215004.1472902703,
              },
              {
                  x: -2273098.2845368856,
                  y: 5010771.008773392,
                  z: 3215006.5834648367,
              },
              {
                  x: -2273085.2149581,
                  y: 5010776.224484442,
                  z: 3215007.6874420852,
              },
              {
                  x: -2273060.1194440527,
                  y: 5010787.107324429,
                  z: 3215008.4596388526,
              },
              {
                  x: -2273052.268879898,
                  y: 5010789.153232572,
                  z: 3215010.8286537277,
              },
              {
                  x: -2273048.5740574095,
                  y: 5010788.136685532,
                  z: 3215014.9750527814,
              },
              {
                  x: -2273046.2069158386,
                  y: 5010783.903650803,
                  z: 3215023.2289560195,
              },
              {
                  x: -2273013.225191267,
                  y: 5010711.003592086,
                  z: 3215159.227493635,
              },
              {
                  x: -2273003.7530798647,
                  y: 5010714.871967782,
                  z: 3215159.9395025484,
              },
              {
                  x: -2272998.104067287,
                  y: 5010714.851373358,
                  z: 3215163.939958693,
              },
              {
                  x: -2272994.7856738493,
                  y: 5010712.621812783,
                  z: 3215169.731864345,
              },
              {
                  x: -2272989.1095662955,
                  y: 5010699.273869096,
                  z: 3215194.3994706264,
              },
          ];

          // 添加动态圆特效实体，详见Entity文档
          let circleWave = viewer.entities.add({
              name: "dynamic Circle",
              ellipse: {
                  semiMinorAxis: 1.0,
                  semiMajorAxis: 1.0,
                  height: 8,
                  heightReference: 2,
                  material: new Cesium.CircleWaveMaterialProperty({
                      duration: 1000,
                      gradient: 0.5,
                      color: Cesium.Color.ORANGE,
                      count: 4,
                  }),
              },
          });
          // 定义动画漫游对象
          animation = new Cesium.AnimationTool(viewer, {
              // 漫游的方向角
              heading: 0,
              // 漫游的俯仰角
              pitch: 0,
              // 设置漫游的视角类型。0：正常，不移动相机；1：跟随；2：锁定第一视角；3：上帝视角
              animationType: 1,
              // 是否循环漫游动画
              isLoop: false,
              // 是否显示漫游路径
              showPath: false,
              // 漫游路径(世界坐标点数组)
              positions: pathPositions,
              // 漫游速度(m/s)
              speed: 5,
              // 倍速
              speedupFactor: 1,
              // 附加高程
              exHeight: 0,
              // 是否显示用时和距离提示信息
              showInfo: true,
              // 漫游的模型对象的url
              modelUrl: "http://192.168.82.89:8200/3DData/Model/glb/Cesium_Man.glb",
              //模型对象参数，详见ModelGraphics对象的文档
              model: {
                  //放大比例
                  scale: 2,
                  //固定大小设为0
                  minimumPixelSize: 0,
              },
              // 完成漫游后的回调函数
              complete: function () {
                  viewer.entities.remove(circleWave);
              },
              // 路径插值算法。可选：拉格朗日算法Cesium.LagrangePolynomialApproximation、线性插值 Cesium.LinearApproximation、埃尔米特插值插值Cesium.HermitePolynomialApproximation
              interpolationAlgorithm: Cesium.LagrangePolynomialApproximation,
              //是否获取当前点坐标，为true时，需配合返回当前点坐标的回调函数callBack一起使用
              isGetPositionNow: true,
              //回调函数，返回当前所在点坐标
              callBack: function (positionNow) {
                  // 动态更新圆特效的位置
                  circleWave.position = new Cesium.CallbackProperty(function () {
                      return positionNow;
                  }, false);
              },
              //是否设置模型运动姿态，保持朝向与运动方向一致
              isSetModelPosture: true,
              //是否需要将较大转弯点处理为圆弧
              isProcessCorner: false,
              //设置判断为转弯点的角度的最大值，不超过150的转角会被执行插值，处理为圆弧
              maxAngle: 150.0,
              //转弯处往圆弧曲线上插值点的步长，点个数=1/curveStep
              curveStep: 0.01,
              // 是否挂载动态扫描特效
              isAddScanEffect: false,
              // 扫描特效实例，可以是动态圆，也可以是雷达扫描
              scanEffect: undefined,
              // 是否获取路径点的真实高程
              isGetRealHeight: true,
              // 速度变化时，各个路径点对应的速度
              speedArray: undefined,
              // 各路径点对应的时间点
              timeArray: undefined,
              // 加速度数组
              accelerationArray: undefined,
              //是否执行onPositionCallback回调函数
              onPositionTag: true,
              // 当点经过设置的路径点时，返回路径点坐标和index索引号
              onPositionCallback: function (result) {
                  console.log(
                      "到达站点" + result.index + "，站点坐标：" + result.position
                  );
              },
              // 用于判断当前点是否在路径点所在位置附近的精度
              disFactor: 10,
          });
          // 开启动画漫游
          animation.start();
      }
      function pause() {
          // 切换动画漫游的暂停状态
          animation.pause = !animation.pause;
          if ($('#pause').html() === '暂停') {
              $('#pause').html('开始');
          } else {
              $('#pause').html('暂停');
          }
      }
  </script>
</head>

<body onload="init()">
<div id="mapgis-3d-viewer"></div>
<div class="layui-panel layui-panel-right" style="width: 100px;">
  <div class="sample-button-panel">
    <button id="pause" type="button" class="layui-btn" onclick="pause()">暂停</button>
  </div>
</div>
</body>
</html>
