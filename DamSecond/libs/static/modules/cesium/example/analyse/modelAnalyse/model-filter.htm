<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
  <title>模型空间过滤工具</title>
  <!--引入Cesium.js库-->
  <script src="http://localhost:8080/static/libs/cdn/cesium/Cesium.js"></script>
  <!--引入Cesium.js库相关css样式-->
  <link rel="stylesheet" href="http://localhost:8080/static/libs/cdn/cesium/Widgets/widgets.css" />
  <link rel="stylesheet" href="http://localhost:8080/static/libs/cdn/cesium/MapGIS/css/mapgis.css" />
  <!--示例中面板、按钮等，第三方layui的js库与css样式-->
  <script src="http://localhost:8080/static/libs/cdn/layui/layui.js"></script>
  <link rel="stylesheet" href="http://localhost:8080/static/libs/cdn/layui/css/layui.css" />
  <!--示例公共样式-->
  <link rel="stylesheet" href="http://localhost:8080/static/libs/css/style.css" />
  <script>
      'use strict';
      //定义三维视图的主要类
      let viewer = null;
      //模型
      let model = null;
      //模型编辑工具
      let modelFilterTool = null;
      //绘制工具
      let drawElement = null;
      //带高度过滤时的初始化参数
      let boundHeightMin = 30;
      let boundHeightMax = 60;
      let centerHeightMin = 30;
      let centerHeightMax = 60;
      //地图初始化函数
      function init() {
          //初始化三维球体
          initViewer();
          //三维试图类构造完毕，添加一个模型
          addModel();
          //当选择带高度的过滤条件时，拖动条
          addSlideBar();
      }

      //初始化三维球体
      function initViewer() {
          //构造三维视图类（视图容器div的id，三维视图设置参数）
          viewer = new Cesium.Viewer('mapgis-3d-viewer', {});
          //为了更好的展示模型的过滤，去掉地球
          viewer.scene.globe.show = false;
      }

      function createDrawElement(){
          if(drawElement === null){
              return new Cesium.DrawElement(viewer);
          }else{
              drawElement.stopDrawing();
              return drawElement;
          }
      }

      function boundFilter(){
          //清空之前的filter
          removeFilter();
          drawElement = createDrawElement();
          drawElement.startDrawingPolygon({
              callback: function (result) {
                  drawElement.stopDrawing();
                  let positions = result.positions;
                  modelFilterTool.filterWithBoundingVolume(positions);
              }
          });
      }

      function boundWithHeightFilter(){
          //清空之前的filter
          removeFilter();
          drawElement = createDrawElement();
          drawElement.startDrawingPolygon({
              callback: function (result) {
                  drawElement.stopDrawing();
                  let positions = result.positions;
                  //如果最小高度和最大高度不传递的话，那么过滤将忽略高度
                  modelFilterTool.filterWithBoundingVolume(positions,boundHeightMin,boundHeightMax);
              }
          });
      }

      function centerFilter(){
          //清空之前的filter
          removeFilter();
          drawElement = createDrawElement();
          drawElement.startDrawingPolygon({
              callback: function (result) {
                  drawElement.stopDrawing();
                  let positions = result.positions;
                  modelFilterTool.filterWithCenter(positions);
              }
          });
      }

      function centerWithHeightFilter(){
          //清空之前的filter
          removeFilter();
          drawElement = createDrawElement();
          drawElement.startDrawingPolygon({
              callback: function (result) {
                  drawElement.stopDrawing();
                  let positions = result.positions;
                  //如果最小高度和最大高度不传递的话，那么过滤将忽略高度
                  modelFilterTool.filterWithCenter(positions,centerHeightMin,centerHeightMax);
              }
          });
      }

      function removeFilter(){
          if(modelFilterTool){
              modelFilterTool.removeFilter();
          }
      }

      //添加模型完毕，针对这个layer初始化模型空间过滤工具
      function addModel(){
          let url = 'http://192.168.82.89:8089/igs/rest/g3d/Scene:DaYanTa-M3D';
          let options = {
              duration: 1,
              loaded: function(layer){
                  modelFilterTool = new Cesium.ModelFilterTool(layer, {
                      //支持输入范围为笛卡尔坐标
                      enableCartesian: true
                  });
              }
          };
          viewer.scene.layers.appendSceneLayer(url,options);
      }

      function addSlideBar(){
          //等值面透明度
          layui.slider.render({
              elem: '#boundHeight',
              theme: 'rgba(24, 144, 255, 1)',
              value: [boundHeightMin, boundHeightMax], //初始值
              range: true, //范围选择
              change: function(values){
                  boundHeightMin = values[0];
                  boundHeightMax = values[1];
              }
          });
          //等值面宽度
          layui.slider.render({
              elem: '#centerHeight',
              theme: 'rgba(24, 144, 255, 1)',
              value: [centerHeightMin, centerHeightMax], //初始值
              range: true, //范围选择
              change: function(values){
                  centerHeightMin = values[0];
                  centerHeightMax = values[1];
              }
          });
      }

  </script>
</head>
<body onload="init()">
<div id="mapgis-3d-viewer">
</div>
<div class="layui-panel layui-panel-right" style="width: 559px;">
  <div class="sample-button-panel">
    <button type="button" class="layui-btn layui-btn-sm layui-btn-normal" onclick="boundFilter()">外包盒过滤</button>
    <button type="button" class="layui-btn layui-btn-sm layui-btn-normal" onclick="boundWithHeightFilter()">外包盒过滤(带高度)</button>
    <button type="button" class="layui-btn layui-btn-sm layui-btn-normal" onclick="centerFilter()">中心点过滤</button>
    <button type="button" class="layui-btn layui-btn-sm layui-btn-normal" onclick="centerWithHeightFilter()">中心点过滤(带高度)</button>
    <button type="button" class="layui-btn layui-btn-sm layui-btn-danger" onclick="removeFilter()">取消过滤</button>
  </div>
</div>
</body>
</html>
