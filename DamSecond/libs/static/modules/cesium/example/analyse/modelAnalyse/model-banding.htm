<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>地质体封边工具</title>
  <!--引入Cesium.js库-->
  <script src="http://localhost:8080/static/libs/cdn/cesium/Cesium.js"></script>
  <!--引入Cesium.js库相关css样式-->
  <link rel="stylesheet" href="http://localhost:8080/static/libs/cdn/cesium/Widgets/widgets.css" />
  <link rel="stylesheet" href="http://localhost:8080/static/libs/cdn/cesium/MapGIS/css/mapgis.css" />
  <!--示例中面板、按钮等，第三方layui的js库与css样式-->
  <script src="http://localhost:8080/static/libs/cdn/layui/layui.js"></script>
  <link rel="stylesheet" href="http://localhost:8080/static/libs/cdn/layui/css/layui.css" />
  <!--示例公共样式-->
  <link rel="stylesheet" href="http://localhost:8080/static/libs/css/style.css" />
  <link rel="stylesheet" href="http://localhost:8080/static/libs/css/tool.css"/>
  <script>
      'use strict';
      //定义三维视图的主要类
      let viewer = null;
      let layerList = [];
      //绘制工具
      let drawElement = null;
      //图层的index
      let layerIndex = null;
      //裁剪的工具
      let cutTool = null;
      //地图初始化函数
      function init() {
          //构造三维视图类（视图容器div的id，三维视图设置参数）
          viewer = new Cesium.Viewer('mapgis-3d-viewer', {});
          //为了更好的展示，去掉地球
          viewer.scene.globe.show = false;
          //三维试图类构造完毕，添加模型
          addModel();
          //模型添加完毕了之后，创建一个cutting的工具
          addCuttingTool();
          //简单切面位置控制的滑块条
          addSlideBar();
          //初始隐藏位置
          hideSlideBar();
          //初始化宽度
          initWidth();
      }
      // 初始隐藏切面位置
      function hideSlideBar(){
        // 获取dom，设置隐藏属性
       document.getElementById('planeSlideBar').style.display = 'none';
      }
       // 设置初始宽度
      function initWidth(){
        document.getElementById('layui-panel-right').style.width="303px"
      }

      //添加一个剖切工具
      function addCuttingTool(){
          if(layerList.length===1){
              //代表模型都添加完了
              cutTool = new Cesium.CuttingTool(viewer, layerList,{
                  onErrorCallback: function(type,msg) {
                      console.log('错误信息：' + type+':'+msg);
                  }
              });
              drawElement = new Cesium.DrawElement(viewer);
          }else{
              //如果没有添加完，那么继续等待
              setTimeout(()=>{
                  addCuttingTool();
              },500)
          }
      }

      function addCuttingPlane(){
          layer.msg("左键选取点，右键结束");
          //先移除上次的切面
          removeCuttingPlane();
        // 点击绘制裁剪面，显示位置条
          document.getElementById('planeSlideBar').style.display = 'block';
        // 修改宽度
        document.getElementById('layui-panel-right').style.width = '431px';
          drawElement.startDrawingPolyline({
              callback: function(result) {
                  let positions = result.positions;
                  let lines = [];
                  for (let i = 0; i < positions.length; i++) {
                      let tempPoint = Cesium.Cartographic.fromCartesian(positions[i]);
                      lines.push(new Cesium.Cartesian3(Cesium.Math.toDegrees(tempPoint.longitude), Cesium.Math.toDegrees(tempPoint.latitude), tempPoint.height));
                  }
                  cutTool.createModelCuttingPlaneFromPolyline(lines, {
                      //裁剪方向，false为原方向，true为反方向
                      unionClippingRegions: false
                  });
                  drawElement.stopDrawing();
              }
          });

      }

      function addCuttingPolygon(){
          //先移除上次的切面
          removeCuttingPlane();
         // 获取dom，隐藏位置条
       document.getElementById('planeSlideBar').style.display = 'none'
        // 恢复初始宽度
       document.getElementById('layui-panel-right').style.width = '303px';
          drawElement.startDrawingPolygon({
              callback: function(result) {
                  let positions = result.positions;
                  let pnts = [];
                  for (let i = 0; i < positions.length; i++) {
                      let position = positions[i];
                      let c1 = Cesium.Cartographic.fromCartesian(position);
                      let p1 = new Cesium.Cartesian3(Cesium.Math.toDegrees(c1.longitude), Cesium.Math.toDegrees(c1.latitude), c1.height);
                      pnts.push(p1);
                  }
                  cutTool.createModelCuttingVolume(pnts, -3000, 3000, { unionClippingRegions: true, distance: 0, showCuttingPlane: false });
                  drawElement.stopDrawing();
              }
          });
      }

      function updateCuttingPlaneDistance(value){
          let tileset = viewer.scene.layers.getM3DLayer(layerIndex);
          let planes = tileset.clippingPlanes;
          if (planes && tileset.clippingPlanes.get(0)){
              for(let i=0;i<planes.length;i++){
                  tileset.clippingPlanes.get(i).distance = Number(value);
              }
          }
      }

      function removeCuttingPlane(){
        addSlideBar()
          let tileset = viewer.scene.layers.getM3DLayer(layerIndex);
          if (tileset.clippingPlanes){
              tileset.clippingPlanes.removeAll();
          }
          if(drawElement){
              drawElement.stopDrawing();
          }

      }

      function addModel(){
          let url = 'http://192.168.82.89:8089/igs/rest/services/M3Dv2/地质体封边模型/M3dServer';
          layerIndex = viewer.scene.layers.appendM3DLayer(url, {
              duration: 2,
              fillClip: true,
              autoReset: true,
              loaded: function(layer) {
                  layer.maximumScreenSpaceError = 16;
                  layerList.push(layer);
              }
          });
      }

      function addSlideBar(){
          //等值面透明度
          layui.slider.render({
              elem: '#planeDistance',
              value: 0,
              min: -200,
              max: 200,
              input: true,
              theme: 'rgba(24, 144, 255, 1)',
              change: function(value){
                  updateCuttingPlaneDistance(value);
              }
          });
      }

  </script>
</head>
<body onload="init()">
<div id="mapgis-3d-viewer">
</div>
<div class="layui-panel layui-panel-right" id="layui-panel-right">
  <div class="sample-main-panel"id="planeSlideBar">
    <div class="slideBarDiv" id="planeSlideBarDiv">
      切面位置：<div id="planeDistance" class="demo-slider"></div>
    </div>
  </div>
  <div class="sample-button-panel">
    <button type="button" class="layui-btn layui-btn-sm layui-btn-normal" onclick="addCuttingPlane()">绘制裁剪面</button>
    <button type="button" class="layui-btn layui-btn-sm layui-btn-normal" onclick="addCuttingPolygon()">绘制裁剪体</button>
    <button type="button" class="layui-btn layui-btn-sm layui-btn-danger" onclick="removeCuttingPlane()">移除裁剪面</button>
  </div>
</div>
<style>
  .slideBarDiv{
    margin: 20px 0;
    color:#fff;
  }
  .demo-slider{
    width: 400px;
    display: inline-block;
  }
  .layui-slider {
    top: -20px;
    width: 230px;
    left: 80px;
  }
  .layui-slider-input {
    top: -33px;
  }
</style>
</body>
</html>
